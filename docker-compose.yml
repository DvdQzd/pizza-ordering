version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:5173"
    environment:
      - VITE_BFF_URL=http://localhost:3000
      - CHOKIDAR_USEPOLLING=true
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      - bff

  bff:
    build:
      context: ./bff
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure

  bff-consumer:
    build:
      context: ./bff
      dockerfile: Dockerfile
    command: ["npm", "run", "start:consumer"]
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      bff:
        condition: service_started
    restart: on-failure

  # NestJS Processor (Professional Architecture)
  backend-processor:
    build:
      context: ./backend-processor
      dockerfile: Dockerfile
    command: ["npm", "run", "start:nestjs"]
    environment:
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure:5
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data: 